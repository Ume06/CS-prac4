// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

PARTS:
    Mux16(a=type, b=false, sel=in[15], out=type);
    Mux16(a=false, b=true, sel=type, out=d1);
    Mux16Way16(a=false, b=false, sel=false, out[0..15]=d2); // Set d2 and d3 to 0 for A-instructions
    Mux16(a=false, b=false, sel=false, out[0..15]=d3);
    Mux16Way16(a=false, b=in[0], sel=type, out[0..15]=c1);
    Mux16Way16(a=false, b=in[1], sel=type, out[0..15]=c2);
    Mux16Way16(a=false, b=in[2], sel=type, out[0..15]=c3);
    Mux16Way16(a=false, b=in[3], sel=type, out[0..15]=c4);
    Mux16Way16(a=false, b=in[4], sel=type, out[0..15]=c5);
    Mux16Way16(a=false, b=in[5], sel=type, out[0..15]=c6);
    Mux16Way16(a=false, b=in[13], sel=type, out[0..15]=j1);
    Mux16Way16(a=false, b=in[14], sel=type, out[0..15]=j2);
    Mux16Way16(a=false, b=in[15], sel=type, out[0..15]=j3);
}